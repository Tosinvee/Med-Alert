// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  reference      String    @unique
  email          String    @unique
  password       String
  email_verified Boolean?       @default(false)
  phone_number   String?
  address        String?
  state          String?
  latitude       Float?
  longitude      Float?
  userType       UserType
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  patient        Patient?
  medic          Medic?
  deviceTokens   DeviceToken[]
}

model Patient {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  first_name     String?
  last_name      String?
  dob            String?
  gender         String?
  deviceTokenId  String?

  conditions     String[]  // e.g. ulcer
  allergies      String[]  // e.g. penicillin
  bloodType      String?

  user           User      @relation(fields: [userId], references: [id])
  emergencies    Emergency[]
}

model Medic {
  id           Int         @id @default(autoincrement())
  userId       Int         @unique
  name         String
  isAvailable  Boolean     @default(true)

  user         User        @relation(fields: [userId], references: [id])
  dispatches   Dispatch[]
}

model Emergency {
  id               Int          @id @default(autoincrement())
  reference        String       @unique
  patientId        Int          @unique
  patient          Patient      @relation(fields: [patientId], references: [id])
  type             String
  description      String?
  locationLat      Float
  locationLng      Float
  createdAt        DateTime    @default(now())
  resolvedAt       DateTime?

  dispatches       Dispatch[]
}

model Dispatch {
  id            Int              @id @default(autoincrement())
  emergencyId   Int
  emergency     Emergency        @relation(fields: [emergencyId], references: [id])
  medicId       Int
  medic         Medic            @relation(fields: [medicId], references: [id])
  status        DispatchStatus   @default(PENDING)
  etaMinutes    Int?
  respondedAt   DateTime?
  completedAt   DateTime?
  createdAt     DateTime         @default(now())
}

model DeviceToken {
  id            Int              @id @default(autoincrement())
  token         String           @unique
  platform      String   
  userId        Int?  
  user          User?            @relation(fields: [userId], references: [id])
  createdAt     DateTime         @default(now())
}

model Otp{
  id            Int              @id @default(autoincrement())
  otp String 
  userEmail String
  expiresAt DateTime
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      String   
  name      String
  createdAt DateTime @default(now())
}

enum DispatchStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}

enum UserType {
  PATIENT
  MEDICS
  ADMIN

}

